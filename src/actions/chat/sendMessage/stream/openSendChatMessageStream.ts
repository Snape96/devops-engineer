import { OpenAIStream, StreamingTextResponse } from 'ai';
import { ChatCompletionRequestMessage, Configuration, OpenAIApi } from 'openai-edge';

/**
 * Configuration for the OpenAI API client, providing the necessary API key.
 * The API key is read from environment variables for security.
 */
const config = new Configuration({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY
});

/**
 * Instance of the OpenAIApi client configured to interact with the OpenAI API.
 * This client is specifically adapted for edge operations.
 */
const openai = new OpenAIApi(config);

/**
 * Specifies the runtime environment where the OpenAI client is expected to be run.
 */
export const runtime = 'edge';

/**
 * Initiates a streaming request to OpenAI's Chat Completion API and returns a text-stream response.
 *
 * @param messages - Array of `ChatCompletionRequestMessage` objects that constitute the conversation history.
 * @param model - The identifier for the OpenAI language model to use.
 * @param onStart - Async function called when the stream connection is established.
 * @param onToken - Async function called for each new token generated by the language model.
 * @param onCompletion - Async function called when the language model has finished generating a response.
 * 
 * @returns {Promise<StreamingTextResponse>} A promise that resolves to a `StreamingTextResponse`, representing the live text-stream.
 */
export const openSendChatMessageStream = async (
  messages: ChatCompletionRequestMessage[],
  model: string,
  onStart: () => Promise<void>,
  onToken: (token: string) => Promise<void>,
  onCompletion: (completion: string) => Promise<void>,

) => {
  // Ask OpenAI for a streaming chat completion given the prompt
  const response = await openai.createChatCompletion({
    model: model,
    stream: true,
    messages
  });

  // Convert the response into a friendly text-stream
  const stream = OpenAIStream(response, {
    onStart,
    onToken,
    onCompletion
  });

  // Respond with the stream
  return new StreamingTextResponse(stream);
};
